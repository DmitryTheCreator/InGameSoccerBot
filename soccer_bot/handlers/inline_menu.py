from aiogram import Router, F, types
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.dispatcher.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardRemove
from soccer_bot.keyboards.inline.competition import competition_keyboard
from soccer_bot.keyboards.inline.table import table_keyboard
from soccer_bot.models.callback_factory.competition import CompetitionCallbackFactory
from soccer_bot.models.callback_factory.table import TableCallbackFactory

router = Router()

# –°–ø–∏—Å–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤ –∏ —Ç–∞–±–ª–∏—Ü
available_competition_names = ["üá¨üáß –ê–ü–õ",
                               "üá™üá∏ –õ–ê-–õ–ò–ì–ê",
                               "üá©üá™ –ë–£–ù–î–ï–°-–õ–ò–ì–ê",
                               "üáÆüáπ –°–ï–†–ò–Ø –ê",
                               "üá´üá∑ –õ–ò–ì–ê 1",
                               "üá∑üá∫ –†–ü–õ"]

available_table_names = ["üìä –¢–∞–±–ª–∏—Ü–∞",
                         "üìÜ –°–ª–µ–¥—É—é—â–∏–π —Ç—É—Ä",
                         "üéØ –ë–æ–º–±–∞—Ä–¥–∏—Ä—ã",
                         "üí° –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã",
                         "üíé –ì–æ–ª+–ü–∞—Å",
                         "üß§ –°—É—Ö–∏–µ –º–∞—Ç—á–∏"]


# –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–Ω—é
class ChooseTable(StatesGroup):
    choosing_competition_name = State()
    choosing_table_name = State()


@router.message(Command(commands=["menu"]))
async def cmd_table(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        text="–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —á–µ–º–ø–∏–æ–Ω–∞—Ç",
        # –ò–Ω–ª–∞–π–Ω –∫–ª–Ω–æ–ø–∫–∏ —Å —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞–º–∏
        reply_markup=competition_keyboard(items=available_competition_names)
    )
    # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –≤—ã–±–æ—Ä —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞
    await state.set_state(ChooseTable.choosing_competition_name)


# –≠—Ç–∞–ø –≤—ã–±–æ—Ä–∞ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞
@router.callback_query(ChooseTable.choosing_competition_name,
                       CompetitionCallbackFactory.filter(F.action == "choose"))
async def competition_chosen(
        callback: types.CallbackQuery,
        callback_data: CompetitionCallbackFactory,
        state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞
    await state.update_data(chosen_competition=callback_data.text.lower())
    await callback.message.answer(
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —á–µ–º–ø–∏–æ–Ω–∞—Ç<b>{callback_data.text}</b>\n\n"
             f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É",
        parse_mode='HTML',
        # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
        reply_markup=table_keyboard(items=available_table_names)
    )
    # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –≤—ã–±–æ—Ä —Ç–∞–±–ª–∏—Ü—ã
    await state.set_state(ChooseTable.choosing_table_name)
    await callback.answer()


# –ù–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω —á–µ–º–ø–∏–æ–Ω–∞—Ç
@router.message(ChooseTable.choosing_competition_name)
async def competition_chosen_incorrectly(message: Message):
    await message.answer(
        text="–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É",
        reply_markup=competition_keyboard(items=available_competition_names)
    )


# –≠—Ç–∞–ø –≤—ã–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã
@router.callback_query(ChooseTable.choosing_table_name,
                       TableCallbackFactory.filter(F.action == "choose"))
async def table_chosen(
        callback: types.CallbackQuery,
        callback_data: TableCallbackFactory,
        state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    user_data = await state.get_data()
    # –í–º–µ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–∞–±–ª–∏—Ü–∞
    # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞
    await callback.message.answer(
        text="–í—ã –≤—ã–±—Ä–∞–ª–∏:\n\n"
             f"–ß–µ–º–ø–∏–æ–Ω–∞—Ç <b>{user_data['chosen_competition']}</b>\n"
             f"–¢–∞–±–ª–∏—Ü–∞ <b>{callback_data.text.lower()}</b>",
        reply_markup=ReplyKeyboardRemove()
    )
    await callback.answer()


# –ù–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
@router.callback_query(ChooseTable.choosing_table_name,
                       TableCallbackFactory.filter(F.action == "cancel"))
async def competition_chosen(
        callback: types.CallbackQuery,
        state: FSMContext):
    await callback.message.answer(
        text="–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —á–µ–º–ø–∏–æ–Ω–∞—Ç",
        # –ò–Ω–ª–∞–π–Ω-–∫–ª–Ω–æ–ø–∫–∏ —Å —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞–º–∏
        reply_markup=competition_keyboard(items=available_competition_names)
    )
    # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –≤—ã–±–æ—Ä —Ç–∞–±–ª–∏—Ü—ã
    await state.set_state(ChooseTable.choosing_competition_name)
    await callback.answer()


# –ù–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞
@router.message(ChooseTable.choosing_table_name)
async def food_size_chosen_incorrectly(message: Message):
    await message.answer(
        text="–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É",
        reply_markup=table_keyboard(items=available_table_names)
    )


# –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.callback_query()
async def error(callback: types.CallbackQuery):
    await callback.answer(
        text="–û—à–∏–±–∫–∞! –û–±–Ω–æ–≤–∏—Ç–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π ‚Äî /menu"
    )
